//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using NHibernate.Cache;
using StackExchange.Redis;

namespace NHibernate.Caches.StackExRedis
{
	public partial class RedisCache : ICache
	{

		/// <inheritdoc />
		public Task<object> GetAsync(object key, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return RegionStrategy.GetAsync(key, cancellationToken);
		}

		/// <inheritdoc />
		public Task<object[]> GetManyAsync(object[] keys, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object[]>(cancellationToken);
			}
			return RegionStrategy.GetManyAsync(keys, cancellationToken);
		}

		/// <inheritdoc />
		public Task PutAsync(object key, object value, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return RegionStrategy.PutAsync(key, value, cancellationToken);
		}

		/// <inheritdoc />
		public Task PutManyAsync(object[] keys, object[] values, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return RegionStrategy.PutManyAsync(keys, values, cancellationToken);
		}

		/// <inheritdoc />
		public Task RemoveAsync(object key, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return RegionStrategy.RemoveAsync(key, cancellationToken);
		}

		/// <inheritdoc />
		public Task RemoveManyAsync(object[] keys, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return RegionStrategy.RemoveManyAsync(keys, cancellationToken);
		}

		/// <inheritdoc />
		public Task ClearAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			cancellationToken.ThrowIfCancellationRequested();
			return RegionStrategy.ClearAsync();
		}

		/// <inheritdoc />
		public Task LockAsync(object key, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return RegionStrategy.LockAsync(key, cancellationToken);
		}

		/// <inheritdoc />
		public async Task<object> LockManyAsync(object[] keys, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			return await (RegionStrategy.LockManyAsync(keys, cancellationToken)).ConfigureAwait(false);
		}

		/// <inheritdoc />
		public Task UnlockAsync(object key, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return RegionStrategy.UnlockAsync(key, cancellationToken);
		}

		/// <inheritdoc />
		public Task UnlockManyAsync(object[] keys, object lockValue, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				return RegionStrategy.UnlockManyAsync(keys, (string) lockValue, cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
