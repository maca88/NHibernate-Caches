//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using NHibernate.Cache;
using NHibernate.Cache.Entry;
using NHibernate.Intercept;
using NHibernate.Properties;
using NHibernate.Type;
using NHibernate.UserTypes;
using StackExchange.Redis;

namespace NHibernate.Caches.StackExRedis.Tests
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class JsonRedisSerializer : IRedisSerializer
	{

		#region Reader & Writer

		private partial class CustomJsonTextReader : JsonTextReader
		{

			public override async Task<bool> ReadAsync(CancellationToken cancellationToken = default(CancellationToken))
			{
				var hasToken = await (base.ReadAsync(cancellationToken));
				if (!hasToken || TokenType != JsonToken.PropertyName || !(Value is string str))
				{
					return hasToken;
				}
				switch (str)
				{
					case "$t":
						SetToken(JsonToken.PropertyName, "$type");
						break;
					case "$v":
						SetToken(JsonToken.PropertyName, "$value");
						break;
					case "$vs":
						SetToken(JsonToken.PropertyName, "$values");
						break;
				}
				return true;
			}
		}

		private partial class CustomJsonTextWriter : JsonTextWriter
		{

			public override Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken = default(CancellationToken))
			{
				switch (name)
				{
					case "$type":
						name = "$t";
						break;
					case "$value":
						name = "$v";
						break;
					case "$values":
						name = "$vs";
						break;
				}
				return base.WritePropertyNameAsync(name, escape, cancellationToken);
			}
		}

		#endregion
	}
}
