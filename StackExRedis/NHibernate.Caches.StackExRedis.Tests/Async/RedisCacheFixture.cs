//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using NHibernate.Cache;
using NHibernate.Caches.Common.Tests;
using NUnit.Framework;

namespace NHibernate.Caches.StackExRedis.Tests
{
	public abstract partial class RedisCacheFixture : CacheFixture
	{

		[Test]
		public async Task TestEnvironmentNameAsync()
		{
			var props = GetDefaultProperties();

			var developProvider = ProviderBuilder();
			props[RedisEnvironment.EnvironmentName] = "develop";
			developProvider.Start(props);
			var developCache = developProvider.BuildCache(DefaultRegion, props);

			var releaseProvider = ProviderBuilder();
			props[RedisEnvironment.EnvironmentName] = "release";
			releaseProvider.Start(props);
			var releaseCache = releaseProvider.BuildCache(DefaultRegion, props);

			const string key = "testKey";
			const string value = "testValue";

			await (developCache.PutAsync(key, value, CancellationToken.None));

			Assert.That(await (releaseCache.GetAsync(key, CancellationToken.None)), Is.Null, "release environment should be separate from develop");

			await (developCache.RemoveAsync(key, CancellationToken.None));
			await (releaseCache.PutAsync(key, value, CancellationToken.None));

			Assert.That(await (developCache.GetAsync(key, CancellationToken.None)), Is.Null, "develop environment should be separate from release");

			await (releaseCache.RemoveAsync(key, CancellationToken.None));

			developProvider.Stop();
			releaseProvider.Stop();
		}

		[Test]
		public async Task TestPutManyAsync()
		{
			var keys = new object[10];
			var values = new object[10];
			for (var i = 0; i < keys.Length; i++)
			{
				keys[i] = $"keyTestPut{i}";
				values[i] = $"valuePut{i}";
			}

			var cache = (RedisCache) GetDefaultCache();
			// Due to async version, it may already be there.
			await (cache.RemoveManyAsync(keys, CancellationToken.None));

			Assert.That(await (cache.GetManyAsync(keys, CancellationToken.None)), Is.EquivalentTo(new object[10]), "cache returned items we didn't add !?!");

			await (cache.PutManyAsync(keys, values, CancellationToken.None));
			var items = await (cache.GetManyAsync(keys, CancellationToken.None));

			for (var i = 0; i < items.Length; i++)
			{
				var item = items[i];
				Assert.That(item, Is.Not.Null, "unable to retrieve cached item");
				Assert.That(item, Is.EqualTo(values[i]), "didn't return the item we added");
			}
		}

		[Test]
		public async Task TestRemoveManyAsync()
		{
			var keys = new object[10];
			var values = new object[10];
			for (var i = 0; i < keys.Length; i++)
			{
				keys[i] = $"keyTestRemove{i}";
				values[i] = $"valueRemove{i}";
			}

			var cache = (RedisCache) GetDefaultCache();

			// add the item
			await (cache.PutManyAsync(keys, values, CancellationToken.None));

			// make sure it's there
			var items = await (cache.GetManyAsync(keys, CancellationToken.None));
			Assert.That(items, Is.EquivalentTo(values), "items just added are not there");

			// remove it
			await (cache.RemoveManyAsync(keys, CancellationToken.None));

			// make sure it's not there
			items = await (cache.GetManyAsync(keys, CancellationToken.None));
			Assert.That(items, Is.EquivalentTo(new object[10]), "items still exists in cache after remove");
		}

		[Test]
		public async Task TestLockUnlockManyAsync()
		{
			if (!SupportsLocking)
				Assert.Ignore("Test not supported by provider");

			var keys = new object[10];
			var values = new object[10];
			for (var i = 0; i < keys.Length; i++)
			{
				keys[i] = $"keyTestLock{i}";
				values[i] = $"valueLock{i}";
			}

			var cache = (RedisCache)GetDefaultCache();

			// add the item
			await (cache.PutManyAsync(keys, values, CancellationToken.None));
			await (cache.LockManyAsync(keys, CancellationToken.None));
			Assert.ThrowsAsync<CacheException>(() => cache.LockManyAsync(keys, CancellationToken.None), "all items should be locked");

			await (Task.Delay(cache.Timeout / Timestamper.OneMs));

			for (var i = 0; i < 2; i++)
			{
				Assert.DoesNotThrowAsync(async () =>
				{
					await (cache.UnlockManyAsync(keys, await (cache.LockManyAsync(keys, CancellationToken.None)), CancellationToken.None));
				}, "the items should be unlocked");
			}

			// Test partial locks by locking the first 5 keys and afterwards try to lock last 6 keys.
			var lockValue = await (cache.LockManyAsync(keys.Take(5).ToArray(), CancellationToken.None));

			Assert.ThrowsAsync<CacheException>(() => cache.LockManyAsync(keys.Skip(4).ToArray(), CancellationToken.None), "the fifth key should be locked");

			Assert.DoesNotThrowAsync(async () =>
			{
				await (cache.UnlockManyAsync(keys, await (cache.LockManyAsync(keys.Skip(5).ToArray(), CancellationToken.None)), CancellationToken.None));
			}, "the last 5 keys should not be locked.");

			// Unlock the first 5 keys
			await (cache.UnlockManyAsync(keys, lockValue, CancellationToken.None));

			Assert.DoesNotThrowAsync(async () =>
			{
				lockValue = await (cache.LockManyAsync(keys, CancellationToken.None));
				await (cache.UnlockManyAsync(keys, lockValue, CancellationToken.None));
			}, "the first 5 keys should not be locked.");
		}

		[Test]
		public void TestNullKeyPutManyAsync()
		{
			var cache = (RedisCache) GetDefaultCache();
			Assert.ThrowsAsync<ArgumentNullException>(() => cache.PutManyAsync(null, null, CancellationToken.None));
		}

		[Test]
		public void TestNullValuePutManyAsync()
		{
			var cache = (RedisCache) GetDefaultCache();
			Assert.ThrowsAsync<ArgumentNullException>(() => cache.PutManyAsync(new object[] { "keyTestNullValuePut" }, null, CancellationToken.None));
		}

		[Test]
		public async Task TestNullKeyGetManyAsync()
		{
			var cache = (RedisCache) GetDefaultCache();
			await (cache.PutAsync("keyTestNullKeyGet", "value", CancellationToken.None));
			var items = await (cache.GetManyAsync(null, CancellationToken.None));
			Assert.IsNull(items);
		}

		[Test]
		public void TestNullKeyRemoveManyAsync()
		{
			var cache = (RedisCache) GetDefaultCache();
			Assert.ThrowsAsync<ArgumentNullException>(() => cache.RemoveManyAsync(null, CancellationToken.None));
		}
	}
}
